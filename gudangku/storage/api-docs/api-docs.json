{
    "openapi": "3.0.0",
    "info": {
        "title": "GudangKu",
        "description": "API Documentation for GudangKu",
        "contact": {
            "email": "flazen.edu@gmail.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/v1/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in to the Apps",
                "operationId": "26ae6f7a2668f358293a502309985206",
                "responses": {
                    "200": {
                        "description": "{user_data}"
                    },
                    "422": {
                        "description": "{validation_msg}"
                    },
                    "401": {
                        "description": "Wrong username or password"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/logout": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Sign out from Apps",
                "operationId": "8859fad6cbeb2081a7611f5b944b4630",
                "responses": {
                    "200": {
                        "description": "Logout success"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/history/destroy/{id}": {
            "delete": {
                "tags": [
                    "History"
                ],
                "summary": "Delete history by id",
                "operationId": "b777472bb6f3263bd117c26cfecd4dd4",
                "responses": {
                    "200": {
                        "description": "history permentally deleted"
                    },
                    "404": {
                        "description": "history failed to permentally deleted"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/history": {
            "get": {
                "tags": [
                    "History"
                ],
                "summary": "Get all history",
                "operationId": "0f4b533e7eecea6a89a6388545c72dd8",
                "responses": {
                    "200": {
                        "description": "history fetched"
                    },
                    "404": {
                        "description": "history failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/inventory/delete/{id}": {
            "delete": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Soft delete inventory by id",
                "operationId": "d65b6267122c2410dff781b1461cae47",
                "responses": {
                    "200": {
                        "description": "inventory deleted"
                    },
                    "404": {
                        "description": "inventory failed to deleted"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/inventory/destroy/{id}": {
            "put": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Edit inventory image by id",
                "operationId": "92f078f7fa5ffd5ca10922963f5ec4ed",
                "responses": {
                    "200": {
                        "description": "inventory image updated"
                    },
                    "404": {
                        "description": "inventory image failed to updated"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Hard delete inventory by id",
                "operationId": "ae5f98a956e96b3d5bae34c2deeecc7f",
                "responses": {
                    "200": {
                        "description": "inventory permentally deleted"
                    },
                    "404": {
                        "description": "inventory failed to permentally deleted"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/inventory/fav_toggle/{id}": {
            "put": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Toogle favorite inventory by id",
                "operationId": "dffa279787dd7b1382bd1a05d2d5f0ca",
                "responses": {
                    "200": {
                        "description": "inventory updated"
                    },
                    "404": {
                        "description": "inventory failed to updated"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/inventory/recover/{id}": {
            "put": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Recover inventory by id",
                "operationId": "6e035ca103c77ff0b063ef9ade841f95",
                "responses": {
                    "200": {
                        "description": "inventory recovered"
                    },
                    "404": {
                        "description": "inventory failed to recovered"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/inventory": {
            "get": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Get all inventory",
                "operationId": "72cde67a8149d3cf2ca3da99f4ba6f8b",
                "responses": {
                    "200": {
                        "description": "inventory fetched"
                    },
                    "404": {
                        "description": "inventory failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/inventory/list": {
            "get": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Get list inventory",
                "operationId": "cf662e6cbceaa6dd82ec4154ff84057d",
                "responses": {
                    "200": {
                        "description": "inventory fetched"
                    },
                    "404": {
                        "description": "inventory failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/inventory/calendar": {
            "get": {
                "tags": [
                    "Inventory"
                ],
                "summary": "Get inventory as calendar format",
                "operationId": "2db05fcbb4f2038bd4d17acd939bf5d5",
                "responses": {
                    "200": {
                        "description": "inventory fetched"
                    },
                    "404": {
                        "description": "inventory failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/report": {
            "get": {
                "tags": [
                    "Report"
                ],
                "summary": "Get all report",
                "operationId": "b9cea5856eb0fcc283d94fd5ae6255b7",
                "responses": {
                    "200": {
                        "description": "report fetched"
                    },
                    "404": {
                        "description": "report failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/stats/total_inventory_by_category": {
            "get": {
                "tags": [
                    "Stats"
                ],
                "summary": "Get total inventory by category",
                "operationId": "e901875809bb57c428ae454f2a842cdc",
                "responses": {
                    "200": {
                        "description": "stats fetched"
                    },
                    "404": {
                        "description": "stats failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/stats/total_inventory_by_favorite": {
            "get": {
                "tags": [
                    "Stats"
                ],
                "summary": "Get total inventory by favorite",
                "operationId": "3306628b237390e6ac08e345274b05a6",
                "responses": {
                    "200": {
                        "description": "stats fetched"
                    },
                    "404": {
                        "description": "stats failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/stats/total_inventory_by_room": {
            "get": {
                "tags": [
                    "Stats"
                ],
                "summary": "Get total inventory by room",
                "operationId": "545884a8e533ec2295f1ee3083f8e8ad",
                "responses": {
                    "200": {
                        "description": "stats fetched"
                    },
                    "404": {
                        "description": "stats failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/user/update_telegram_id": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update telegram token id",
                "operationId": "b3319a420453e08af500d97aa4d48b6d",
                "responses": {
                    "200": {
                        "description": "telegram id updated! and validation has been sended to you"
                    },
                    "404": {
                        "description": "telegram id failed to update"
                    },
                    "409": {
                        "description": "telegram user id has been used"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/register/token": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Check and send validation token to the user who in registration process",
                "operationId": "f9a08af4b40b9ac720ec6222bb337c0f",
                "responses": {
                    "200": {
                        "description": "the validation token has been sended to {email} email account"
                    },
                    "409": {
                        "description": "there already a request with same username / username already being used"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/register/account": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Register account and accept validation",
                "operationId": "29226b21d6a5a79d2e87ade3dfed667f",
                "responses": {
                    "200": {
                        "description": "account is registered"
                    },
                    "404": {
                        "description": "Token is invalid"
                    },
                    "409": {
                        "description": "username already used"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/register/regen_token": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Regenerate registration token",
                "operationId": "de83a252f4cbd7f245743ba8e36c2da2",
                "responses": {
                    "200": {
                        "description": "the validation token has been sended to {email} email account"
                    },
                    "404": {
                        "description": "request not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/user/update_timezone_fcm": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Update user timezone",
                "operationId": "a8507903e83d7a4e0cc32bc26c47889f",
                "responses": {
                    "200": {
                        "description": "firebase message token / timezone has been updated"
                    },
                    "422": {
                        "description": "Timezone is invalid"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/user/my_profile": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get my profile",
                "operationId": "c286fe042f9492a53f1a424547fa83e4",
                "responses": {
                    "200": {
                        "description": "user fetched"
                    },
                    "404": {
                        "description": "user failed to fetched"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Admin": {
                "required": [
                    "id",
                    "username",
                    "password",
                    "email",
                    "telegram_is_valid",
                    "password",
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "string",
                        "format": "uuid"
                    },
                    "telegram_user_id": {
                        "description": "Telegram Account ID for Bot Apps",
                        "type": "string"
                    },
                    "telegram_is_valid": {
                        "description": "Validation status of attached telegram account",
                        "type": "boolean"
                    },
                    "firebase_fcm_token": {
                        "description": "FCM Notification Token for Mobile Apps",
                        "type": "string"
                    },
                    "line_user_id": {
                        "description": "Line Account ID for Bot Apps",
                        "type": "string"
                    },
                    "username": {
                        "description": "Unique Identifier for admin",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email for Auth and Task Scheduling",
                        "type": "string"
                    },
                    "password": {
                        "description": "Sanctum Hashed Password",
                        "type": "string"
                    },
                    "timezone": {
                        "description": "UTC timezone for Task Scheduling",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the admin was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the admin was updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Dictionary": {
                "required": [
                    "dictionary_type",
                    "dictionary_name"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "string",
                        "format": "uuid"
                    },
                    "dictionary_type": {
                        "description": "Type of the dictionary",
                        "type": "string"
                    },
                    "dictionary_name": {
                        "description": "Name of the dictionary",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Error": {
                "required": [
                    "id",
                    "message",
                    "stack_trace",
                    "file",
                    "line",
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "integer"
                    },
                    "message": {
                        "description": "Message or description of the error",
                        "type": "string"
                    },
                    "stack_trace": {
                        "description": "Trail of function calls leading up to the error",
                        "type": "string"
                    },
                    "file": {
                        "description": "Path of the file where the error is faced",
                        "type": "string"
                    },
                    "line": {
                        "description": "Line of code in specific file where the error is faced",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp when the error was faced",
                        "type": "string",
                        "format": "date-time"
                    },
                    "fixed_at": {
                        "description": "Timestamp when the dev team finally fix and deploy the bug / error fix",
                        "type": "string",
                        "format": "date-time"
                    },
                    "faced_by": {
                        "description": "ID of the user who specific faced the error",
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object"
            },
            "FailedJobs": {
                "required": [
                    "id",
                    "type",
                    "status",
                    "payload",
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the failed jobs on Task Scheduling",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the failed jobs on Task Scheduling",
                        "type": "string"
                    },
                    "payload": {
                        "description": "Respond / Payload from the error",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the jobs had failed",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "History": {
                "required": [
                    "id",
                    "history_type",
                    "history_context",
                    "created_at",
                    "created_by"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "integer"
                    },
                    "history_type": {
                        "description": "Type of the history",
                        "type": "string"
                    },
                    "history_context": {
                        "description": "Context of the history",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the user created the history",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "description": "ID of the user who created the history",
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object"
            },
            "Inventory": {
                "required": [
                    "id",
                    "inventory_name",
                    "inventory_category",
                    "inventory_room",
                    "inventory_price",
                    "inventory_unit",
                    "is_favorite",
                    "is_reminder",
                    "created_at",
                    "created_by"
                ],
                "properties": {
                    "id": {
                        "description": "Primary key for the inventory",
                        "type": "string",
                        "format": "uuid"
                    },
                    "inventory_name": {
                        "description": "Name of the inventory",
                        "type": "string"
                    },
                    "inventory_category": {
                        "description": "Category of the inventory",
                        "type": "string"
                    },
                    "inventory_desc": {
                        "description": "Description of the inventory",
                        "type": "string"
                    },
                    "inventory_merk": {
                        "description": "Merk or brand of the inventory",
                        "type": "string"
                    },
                    "inventory_color": {
                        "description": "Color of the inventory",
                        "type": "string"
                    },
                    "inventory_room": {
                        "description": "Room where the inventory is located",
                        "type": "string"
                    },
                    "inventory_storage": {
                        "description": "Storage location of the inventory",
                        "type": "string"
                    },
                    "inventory_rack": {
                        "description": "Rack or location within the storage",
                        "type": "string"
                    },
                    "inventory_price": {
                        "description": "Price of the inventory",
                        "type": "number",
                        "format": "float"
                    },
                    "inventory_image": {
                        "description": "Firebase Storage URL to the image of the inventory",
                        "type": "string",
                        "format": "url"
                    },
                    "inventory_unit": {
                        "description": "Unit of measurement for the inventory",
                        "type": "string"
                    },
                    "inventory_vol": {
                        "description": "Volume of the inventory",
                        "type": "number",
                        "format": "float"
                    },
                    "inventory_capacity_unit": {
                        "description": "Unit of capacity for the inventory",
                        "type": "string"
                    },
                    "inventory_capacity_vol": {
                        "description": "Capacity volume of the inventory",
                        "type": "number",
                        "format": "float"
                    },
                    "is_favorite": {
                        "description": "Indicates if the inventory is marked as a favorite",
                        "type": "boolean"
                    },
                    "is_reminder": {
                        "description": "Indicates if a reminder is set for the inventory",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Timestamp when the inventory was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "description": "ID of the user who created the inventory",
                        "type": "string",
                        "format": "uuid"
                    },
                    "updated_at": {
                        "description": "Timestamp when the inventory was updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Timestamp when the inventory was deleted",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PersonalAccessToken": {
                "required": [
                    "id",
                    "tokenable_type",
                    "tokenable_id",
                    "name",
                    "token",
                    "abilities",
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "integer"
                    },
                    "tokenable_type": {
                        "description": "Model / Role who generated the auth token",
                        "type": "string"
                    },
                    "tokenable_id": {
                        "description": "ID of the user who generated the auth token",
                        "type": "string"
                    },
                    "name": {
                        "description": "Source of the auth token generated",
                        "type": "string"
                    },
                    "token": {
                        "description": "Auth token that will be used for Auth Bearer all the protected API",
                        "type": "string"
                    },
                    "abilities": {
                        "description": "Ability of auth token",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the auth token was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the auth token was updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "expires_at": {
                        "description": "Timestamp when the auth token will expired",
                        "type": "string",
                        "format": "date-time"
                    },
                    "last_used_at": {
                        "description": "Timestamp when the last time token was used for calling other protected API",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Reminder": {
                "required": [
                    "id",
                    "inventory_id",
                    "reminder_desc",
                    "reminder_type",
                    "reminder_context",
                    "created_at",
                    "created_by"
                ],
                "properties": {
                    "id": {
                        "description": "Primary key for the reminder",
                        "type": "string",
                        "format": "uuid"
                    },
                    "inventory_id": {
                        "description": "ID of the inventory",
                        "type": "string",
                        "format": "uuid"
                    },
                    "reminder_desc": {
                        "description": "Description of the reminder",
                        "type": "string"
                    },
                    "reminder_type": {
                        "description": "Type of the reminder",
                        "type": "string"
                    },
                    "reminder_context": {
                        "description": "Context of the reminder",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the reminder was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "description": "ID of the user who created the reminder",
                        "type": "string",
                        "format": "uuid"
                    },
                    "updated_at": {
                        "description": "Timestamp when the reminder was updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ReportItem": {
                "required": [
                    "id",
                    "report_id",
                    "item_name",
                    "item_qty",
                    "created_at",
                    "created_by"
                ],
                "properties": {
                    "id": {
                        "description": "Primary key for the report item",
                        "type": "string",
                        "format": "uuid"
                    },
                    "inventory_id": {
                        "description": "ID of the inventory",
                        "type": "string",
                        "format": "uuid"
                    },
                    "report_id": {
                        "description": "ID of the report",
                        "type": "string",
                        "format": "uuid"
                    },
                    "item_name": {
                        "description": "Name of the item",
                        "type": "string"
                    },
                    "item_desc": {
                        "description": "Description of the item",
                        "type": "string"
                    },
                    "item_qty": {
                        "description": "Quantity of the item",
                        "type": "integer"
                    },
                    "item_price": {
                        "description": "Price of the item",
                        "type": "number",
                        "format": "float"
                    },
                    "created_at": {
                        "description": "Timestamp when the report item was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "description": "ID of the user who created the report item",
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object"
            },
            "Report": {
                "required": [
                    "id",
                    "report_title",
                    "report_category",
                    "is_reminder",
                    "created_at",
                    "created_by"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "integer"
                    },
                    "report_title": {
                        "description": "Title of the report",
                        "type": "string"
                    },
                    "report_desc": {
                        "description": "Description of the report",
                        "type": "string"
                    },
                    "report_category": {
                        "description": "Category of the report",
                        "type": "string"
                    },
                    "is_reminder": {
                        "description": "Indicates if a reminder is set for the report",
                        "type": "string"
                    },
                    "remind_at": {
                        "description": "Timestamp when the report remind to user",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "description": "Timestamp when the user created the report",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the user updated the report",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Timestamp when the user deleted the report",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "description": "ID of the user who created the report",
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object"
            },
            "ScheduleMark": {
                "required": [
                    "id",
                    "reminder_id",
                    "last_execute"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "integer"
                    },
                    "reminder_id": {
                        "description": "ID of the reminder",
                        "type": "string"
                    },
                    "last_execute": {
                        "description": "Timestamp when the reminder was executed",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Users": {
                "required": [
                    "id",
                    "username",
                    "password",
                    "email",
                    "telegram_is_valid",
                    "password",
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "string",
                        "format": "uuid"
                    },
                    "telegram_user_id": {
                        "description": "Telegram Account ID for Bot Apps",
                        "type": "string"
                    },
                    "telegram_is_valid": {
                        "description": "Validation status of attached telegram account",
                        "type": "boolean"
                    },
                    "firebase_fcm_token": {
                        "description": "FCM Notification Token for Mobile Apps",
                        "type": "string"
                    },
                    "line_user_id": {
                        "description": "Line Account ID for Bot Apps",
                        "type": "string"
                    },
                    "username": {
                        "description": "Unique Identifier for user",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email for Auth and Task Scheduling",
                        "type": "string"
                    },
                    "password": {
                        "description": "Sanctum Hashed Password",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone number for Task Scheduling and OTP Auth",
                        "type": "string"
                    },
                    "timezone": {
                        "description": "UTC timezone for Task Scheduling",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the user was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the user was updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ValidateRequest": {
                "required": [
                    "id",
                    "request_type",
                    "request_context",
                    "created_at",
                    "created_by"
                ],
                "properties": {
                    "id": {
                        "description": "Primary Key",
                        "type": "integer"
                    },
                    "request_type": {
                        "description": "Type of the request",
                        "type": "string"
                    },
                    "request_context": {
                        "description": "Context of the request",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the user make the request",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "description": "ID of the user who make the request",
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "History",
            "description": "History"
        },
        {
            "name": "Inventory",
            "description": "Inventory"
        },
        {
            "name": "Report",
            "description": "Report"
        },
        {
            "name": "Stats",
            "description": "Stats"
        },
        {
            "name": "User",
            "description": "User"
        }
    ]
}